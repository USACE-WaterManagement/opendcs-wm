plugins {
    id 'java'
    id 'java-library'
    id 'eclipse'
    id 'idea'    
    id 'jacoco'
}

eclipse {
    classpath {
       downloadSources=true
       downloadJavadoc = true
    }
}

configurations {
    all {
        exclude group: "com.oracle.database.jdbc", module: "jmscommon"
        exclude group: "stax"
        exclude group: "javax.media"
        exclude group: "com.sun.media"
        exclude group: "log4j"
        exclude group: "org.apache.xmlbeans", module: "xmlbeans"
        exclude group: "dom4j", module: "dom4j"
    }
}

dependencies {
    implementation(libs.bundles.opendcs)
    implementation(libs.bundles.cwms.data.access) {
        exclude group: "org.jooq.pro", module: "jooq-meta"
        exclude group: "org.jooq.pro", module: "jooq-codegen"
        exclude group: "com.oracle.database.jdbc"
        exclude group: "mil.army.usace.hec", module: "hec-monolith"
        exclude group: "com.oracle.database.jdbc"
        exclude group: "com.oracle.database.jdbc", module: "jmscommon"
        exclude group: "mil.army.usace.hec", module: "hec-monolith"
        exclude group: "codebase"
        exclude group: "org.jdom"
        exclude group: "org.bouncycastle"
        exclude group: "org.eclipse.jetty.aggregate"
        exclude group: "javax.servlet"
        exclude group: "mil.army.usace.hec.swingx"
        exclude group: "com.fifesoft"
        exclude group: "org.python"
        exclude group: "com.vividsolutions"
        exclude group: "mil.army.usace.hec", module: "context-specific-help"
        exclude group: "mil.army.usace.hec", module: "hec-geojson"
        exclude group: "javax.mail"
        exclude group: "org.apache.poi"
        exclude group: "net.java.dev.jna"
        exclude group: "org.apache-commons", module: "common-vfs2"
        exclude group: "org.jfree"
        exclude group: "com.mrsid"
        exclude group: "javax.help"
        exclude group: "org.jooq.pro"
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()
}


jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}